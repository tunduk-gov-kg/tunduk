// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Catalog.DataAccessLayer.Migrations {
    [DbContext(typeof(AppDbContext))]
    internal class AppDbContextModelSnapshot : ModelSnapshot {
        protected override void BuildModel(ModelBuilder modelBuilder) {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Catalog.DataAccessLayer.Catalog.Entity.MemberInfo", b => {
                b.Property<long>("MemberInfoId");

                b.Property<string>("Description")
                    .HasColumnType("text");

                b.Property<long?>("MemberStatusId");

                b.Property<long?>("MemberTypeId");

                b.Property<DateTime?>("ModificationDateTime");

                b.Property<string>("Site")
                    .HasMaxLength(100);

                b.HasKey("MemberInfoId");

                b.HasIndex("MemberStatusId");

                b.HasIndex("MemberTypeId");

                b.ToTable("MemberInfoRecords");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.Catalog.Entity.MemberInfoRoleReference", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<long>("MemberInfoId");

                b.Property<long>("MemberRoleId");

                b.HasKey("Id");

                b.HasIndex("MemberRoleId");

                b.HasIndex("MemberInfoId", "MemberRoleId")
                    .IsUnique();

                b.ToTable("MemberInfoRoleReferences");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.Catalog.Entity.MemberRole", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100);

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("MemberRoles");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.Catalog.Entity.MemberStatus", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(200);

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("MemberStatuses");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.Catalog.Entity.MemberType", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(200);

                b.HasKey("Id");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("MemberTypes");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.Member", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<DateTime>("CreationDateTime")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValueSql("now()");

                b.Property<string>("Instance")
                    .IsRequired()
                    .HasMaxLength(20);

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValue(false);

                b.Property<string>("MemberClass")
                    .IsRequired()
                    .HasMaxLength(20);

                b.Property<string>("MemberCode")
                    .IsRequired()
                    .HasMaxLength(20);

                b.Property<DateTime?>("ModificationDateTime");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(1000);

                b.HasKey("Id");

                b.HasIndex("Instance", "MemberClass", "MemberCode")
                    .IsUnique();

                b.ToTable("Members");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.MemberService", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<DateTime>("CreationDateTime")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValueSql("now()");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValue(false);

                b.Property<long>("MemberId");

                b.Property<DateTime?>("ModificationDateTime")
                    .ValueGeneratedOnUpdate();

                b.Property<string>("ServiceCode")
                    .IsRequired()
                    .HasMaxLength(100);

                b.Property<string>("ServiceVersion")
                    .HasMaxLength(100);

                b.Property<string>("Wsdl")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("MemberId", "ServiceCode", "ServiceVersion")
                    .IsUnique();

                b.ToTable("MemberServices");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.SecurityServer", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<string>("Address")
                    .IsRequired()
                    .HasMaxLength(500);

                b.Property<DateTime>("CreationDateTime")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValueSql("now()");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValue(false);

                b.Property<long>("MemberId");

                b.Property<DateTime?>("ModificationDateTime")
                    .ValueGeneratedOnUpdate();

                b.Property<string>("SecurityServerCode")
                    .IsRequired()
                    .HasMaxLength(100);

                b.HasKey("Id");

                b.HasIndex("MemberId", "SecurityServerCode")
                    .IsUnique();

                b.ToTable("SecurityServers");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.SubSystem", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<DateTime>("CreationDateTime")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValueSql("now()");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValue(false);

                b.Property<long>("MemberId");

                b.Property<DateTime?>("ModificationDateTime");

                b.Property<string>("SubSystemCode")
                    .IsRequired()
                    .HasMaxLength(100);

                b.HasKey("Id");

                b.HasIndex("MemberId", "SubSystemCode")
                    .IsUnique();

                b.ToTable("SubSystems");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.SubSystemService", b => {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd();

                b.Property<DateTime>("CreationDateTime")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValueSql("now()");

                b.Property<bool>("IsDeleted")
                    .ValueGeneratedOnAdd()
                    .HasDefaultValue(false);

                b.Property<DateTime?>("ModificationDateTime")
                    .ValueGeneratedOnUpdate();

                b.Property<string>("ServiceCode")
                    .IsRequired()
                    .HasMaxLength(100);

                b.Property<string>("ServiceVersion")
                    .HasMaxLength(100);

                b.Property<long>("SubSystemId");

                b.Property<string>("Wsdl")
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("SubSystemId", "ServiceCode", "ServiceVersion")
                    .IsUnique();

                b.ToTable("SubSystemServices");
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.Catalog.Entity.MemberInfo", b => {
                b.HasOne("Catalog.DataAccessLayer.XRoad.Entity.Member", "Member")
                    .WithOne("MemberInfo")
                    .HasForeignKey("Catalog.DataAccessLayer.Catalog.Entity.MemberInfo", "MemberInfoId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("Catalog.DataAccessLayer.Catalog.Entity.MemberStatus", "MemberStatus")
                    .WithMany("MemberInfoRecords")
                    .HasForeignKey("MemberStatusId")
                    .OnDelete(DeleteBehavior.Restrict);

                b.HasOne("Catalog.DataAccessLayer.Catalog.Entity.MemberType", "MemberType")
                    .WithMany("MemberInfoRecords")
                    .HasForeignKey("MemberTypeId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.Catalog.Entity.MemberInfoRoleReference", b => {
                b.HasOne("Catalog.DataAccessLayer.Catalog.Entity.MemberInfo", "MemberInfo")
                    .WithMany("MemberRoleReferences")
                    .HasForeignKey("MemberInfoId")
                    .OnDelete(DeleteBehavior.Cascade);

                b.HasOne("Catalog.DataAccessLayer.Catalog.Entity.MemberRole", "MemberRole")
                    .WithMany("MemberInfoReferences")
                    .HasForeignKey("MemberRoleId")
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.MemberService", b => {
                b.HasOne("Catalog.DataAccessLayer.XRoad.Entity.Member", "Member")
                    .WithMany("Services")
                    .HasForeignKey("MemberId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.SecurityServer", b => {
                b.HasOne("Catalog.DataAccessLayer.XRoad.Entity.Member", "Member")
                    .WithMany("SecurityServers")
                    .HasForeignKey("MemberId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.SubSystem", b => {
                b.HasOne("Catalog.DataAccessLayer.XRoad.Entity.Member", "Member")
                    .WithMany("SubSystems")
                    .HasForeignKey("MemberId")
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity("Catalog.DataAccessLayer.XRoad.Entity.SubSystemService", b => {
                b.HasOne("Catalog.DataAccessLayer.XRoad.Entity.SubSystem", "SubSystem")
                    .WithMany("Services")
                    .HasForeignKey("SubSystemId")
                    .OnDelete(DeleteBehavior.Restrict);
            });
#pragma warning restore 612, 618
        }
    }
}